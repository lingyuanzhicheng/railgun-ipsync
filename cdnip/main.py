import os
import re
import time
import json
import requests
from typing import List, Set, Dict

# Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
os.makedirs(os.path.dirname(__file__), exist_ok=True)

USER_AGENT = 'Mozilla/5.0 (compatible; IP-Collector/1.0)'
SESSION = requests.Session()
SESSION.headers.update({'User-Agent': USER_AGENT})

def extract_ips(text: str) -> List[str]:
    ips = re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', text)
    valid_ips = [ip for ip in ips if all(0 <= int(octet) <= 255 for octet in ip.split('.'))]
    unique_sorted = sorted(set(valid_ips), key=lambda ip: tuple(map(int, ip.split('.'))))
    return unique_sorted

def fetch_direct(url: str) -> str:
    resp = SESSION.get(url, timeout=10)
    resp.raise_for_status()
    return resp.text

def fetch_via_phantomjs_cloud(url: str) -> str:
    api_url = 'https://PhantomJsCloud.com/api/browser/v2/a-demo-key-with-low-quota-per-ip-address/'
    payload = {"url": url, "renderType": "html"}
    resp = SESSION.post(api_url, json=payload, timeout=20)
    resp.raise_for_status()
    return resp.text

def save_ips_to_file(ips: List[str], filename: str):
    filepath = os.path.join(os.path.dirname(__file__), filename)
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write('\n'.join(ips))
    print(f"‚úÖ Â∑≤‰øùÂ≠ò {len(ips)} ‰∏™ IP Âà∞ {filename}")

def aggregate_all_ips_to_data_txt():
    ip_set: Set[str] = set()
    dir_path = os.path.dirname(__file__)
    for file in os.listdir(dir_path):
        if file.endswith('.txt') and file != 'data.txt':
            filepath = os.path.join(dir_path, file)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    for line in f:
                        ip = line.strip()
                        if re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', ip):
                            if all(0 <= int(octet) <= 255 for octet in ip.split('.')):
                                ip_set.add(ip)
            except Exception as e:
                print(f"‚ö†Ô∏è ËØªÂèñÊñá‰ª∂ {file} Êó∂Âá∫Èîô: {e}")

    sorted_ips = sorted(ip_set, key=lambda ip: tuple(map(int, ip.split('.'))))
    data_file = os.path.join(dir_path, 'data.txt')
    with open(data_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(sorted_ips))
    print(f"‚úÖ ËÅöÂêàÂÆåÊàêÔºöÂÖ± {len(sorted_ips)} ‰∏™ÂîØ‰∏Ä IP Â∑≤ÂÜôÂÖ• data.txt")

def enrich_ips_with_geo_info():
    """Á¨¨‰∏âÊ≠•ÔºöË∞ÉÁî® ip-api.com Ëé∑ÂèñÂú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØÔºåÁîüÊàê data.json"""
    dir_path = os.path.dirname(__file__)
    data_txt = os.path.join(dir_path, 'data.txt')
    data_json = os.path.join(dir_path, 'data.json')

    if not os.path.exists(data_txt):
        print("‚ùå data.txt ‰∏çÂ≠òÂú®ÔºåÊó†Ê≥ïËøõË°åÂú∞ÁêÜ‰ø°ÊÅØÂ¢ûÂº∫„ÄÇ")
        return

    with open(data_txt, 'r', encoding='utf-8') as f:
        ips = [line.strip() for line in f if line.strip()]

    results: List[Dict[str, str]] = []
    total = len(ips)
    print(f"üåç Ê≠£Âú®‰∏∫ {total} ‰∏™ IP Êü•ËØ¢Âú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØÔºàÊØèÁßíÊúÄÂ§ö1‰∏™ËØ∑Ê±ÇÔºâ...")

    for i, ip in enumerate(ips, 1):
        try:
            print(f"  ({i}/{total}) Êü•ËØ¢ {ip} ...")
            url = f"http://ip-api.com/json/{ip}?lang=zh-CN"
            resp = SESSION.get(url, timeout=10)
            if resp.status_code == 200:
                data = resp.json()
                if data.get("status") == "success":
                    results.append({
                        "ip": ip,
                        "country": data.get("country", ""),
                        "regionName": data.get("regionName", ""),
                        "city": data.get("city", "")
                    })
                else:
                    print(f"    ‚ö†Ô∏è Êü•ËØ¢Â§±Ë¥•: {data.get('message', 'Unknown error')}")
            else:
                print(f"    ‚ö†Ô∏è HTTP {resp.status_code}")
        except Exception as e:
            print(f"    ‚ùå ËØ∑Ê±ÇÂºÇÂ∏∏: {e}")

        # ÈÅµÂÆàÂÖçË¥π API ÈôêÊµÅÔºàÂª∫ËÆÆ ‚â•1.4 ÁßíÈó¥ÈöîÔºâ
        if i < total:
            time.sleep(1.5)

    # ‰øùÂ≠ò‰∏∫ JSON
    with open(data_json, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ Âú∞ÁêÜ‰ø°ÊÅØÂ¢ûÂº∫ÂÆåÊàêÔºåÂÖ± {len(results)} Êù°ËÆ∞ÂΩïÂ∑≤ÂÜôÂÖ• data.json")

# Êï∞ÊçÆÊ∫êÂÆö‰πâ
SOURCES = [
    ("https://ipdb.api.030101.xyz/?type=bestcf&country=true", "030101.txt", "direct"),
    ("https://ip.164746.xyz", "164746.txt", "direct"),
    ("https://stock.hostmonit.com/CloudFlareYes", "CloudFlareYes.txt", "phantomjs"),
    ("https://ip.haogege.xyz", "haogege.txt", "direct"),
    ("https://api.uouin.com/cloudflare.html", "uouin", "direct"),
    ("https://www.wetest.vip/page/cloudflare/address_v4.html", "wetest.txt", "direct"),
    ("hhttps://vps789.com/public/sum/cfIpApi", "vps789.txt", "direct"),
]

def main():
    # Á¨¨‰∏ÄÊ≠•ÔºöÊäìÂèñÂêÑÊ∫ê IP
    for url, filename, strategy in SOURCES:
        try:
            print(f"üì° Ê≠£Âú®ÊäìÂèñ {url} ({strategy}) ...")
            if strategy == "direct":
                html = fetch_direct(url)
            elif strategy == "phantomjs":
                html = fetch_via_phantomjs_cloud(url)
            else:
                raise ValueError(f"Êú™Áü•Á≠ñÁï•: {strategy}")

            ips = extract_ips(html)
            save_ips_to_file(ips, filename)

        except Exception as e:
            print(f"‚ùå ÊäìÂèñÂ§±Ë¥• {url}: {e}")

    # Á¨¨‰∫åÊ≠•ÔºöËÅöÂêàÂà∞ data.txt
    print("\nüîÑ Ê≠£Âú®ËÅöÂêàÊâÄÊúâ IP Âà∞ data.txt...")
    aggregate_all_ips_to_data_txt()

    # Á¨¨‰∏âÊ≠•ÔºöÂú∞ÁêÜ‰ø°ÊÅØÂ¢ûÂº∫ ‚Üí data.json
    print("\nüìç Ê≠£Âú®ÊâßË°åÂú∞ÁêÜ‰ø°ÊÅØÂ¢ûÂº∫ÔºàË∞ÉÁî® ip-api.comÔºâ...")
    enrich_ips_with_geo_info()

if __name__ == "__main__":
    main()